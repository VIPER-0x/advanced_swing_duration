//@version=6

indicator('Integrated Simulation with Table', overlay = true, max_bars_back = 499)

// Initialize larger arrays for more detailed ranges
var array<float> t_upper = array.new_float(10) // 1 to 10 for upper internal range
var array<float> t_lower = array.new_float(100) // 1 to 100 for lower internal range
var array<float> t_external = array.new_float(500) // For external ranges 100 to 240 and 0 to -260

// Initialize arrays with progressive values
f_init_arrays() =>
    // Upper internal range (1 to 10)
    for i = 0 to 9 by 1
        array.set(t_upper, i, 1.0 + i * (9.0 / 9))

    // Lower internal range (1 to 100)
    for i = 0 to 99 by 1
        array.set(t_lower, i, 1.0 + i * (99.0 / 99))

    // External range values
    for i = 0 to 499 by 1
        if i < 140 // For 100 to 240
            array.set(t_external, i, 100.0 + i)
        else // For 0 to -260
            array.set(t_external, i, 0.0 - (i - 140))

if barstate.islast
    f_init_arrays()

// Create a table to display results
var table resultsTable = table.new(position.bottom_right, 50, 50, border_color = color.white, bgcolor = color.new(color.black, 70))

// Table headers
if barstate.islast
    table.cell(resultsTable, 0, 0, 'Range Type', text_color = color.white, bgcolor = color.new(color.blue, 70))
    table.cell(resultsTable, 0, 1, 'Value', text_color = color.white, bgcolor = color.new(color.blue, 70))
    table.cell(resultsTable, 0, 2, 'Level', text_color = color.white, bgcolor = color.new(color.blue, 70))

Calculate() =>
    position_x = 1.0 + 0.5 * bar_index * 0.1
    [position_x]

[position_x] = Calculate()
// Define input parameters  
numCandles = math.floor(position_x)

// Calculate the highest high and lowest low within the specified number of candles  
hh = ta.highest(numCandles)
ll = ta.lowest(numCandles)

// Define swing points  
var float swingHigh = 0.0000
var float swingLow = 0.0000
var float lastSwingHigh = 0.0000
var float lastSwingLow = 0.0000
var line la = na
var line lb = na
var line eql_line = na
var label eql_lbl = na
var label lbl_upper = na
var label lbl_lower = na
// Initialize table  
var table rangeTable = table.new(position = position.bottom_right, columns = 12, rows = 11, bgcolor = color.new(color.gray, 90), border_width = 1)

// Calculate swing highs and lows  
if high > hh[1] and high > high[3]
    lastSwingHigh := swingHigh
    swingHigh := high
    line.delete(la)
    la := line.new(x1 = bar_index, y1 = swingHigh, x2 = bar_index + numCandles, y2 = swingHigh, color = color.green, width = 2, style = line.style_dotted)
    label.delete(lbl_upper)
    lbl_upper := label.new(time[2], swingHigh, text = str.tostring(swingHigh), yloc = yloc.price, xloc = xloc.bar_time, textcolor = color.white, color = #ffffff00)
    lbl_upper
if low < ll[1] and low < low[3]
    lastSwingLow := swingLow
    swingLow := low
    line.delete(lb)
    lb := line.new(x1 = bar_index, y1 = swingLow, x2 = bar_index + numCandles, y2 = swingLow, color = color.red, width = 2, style = line.style_dotted)
    label.delete(lbl_lower)
    lbl_lower := label.new(time[20], swingLow, text = str.tostring(swingLow), yloc = yloc.price, xloc = xloc.bar_time, textcolor = color.white, color = #ffffff00, style = label.style_label_up)
    lbl_lower
    // Calculate range  
RANGE_CALC = math.max(swingHigh, swingLow) - math.min(swingHigh, swingLow)
EQUILIBRIUM = (math.max(swingHigh, swingLow) + math.min(swingHigh, swingLow)) / 2
table.cell(rangeTable, column = 0, row = 0, text = 'Range Value', bgcolor = color.new(color.blue, 90), text_color = color.white)
table.cell(rangeTable, column = 0, row = 1, text = 'EQUILIBRIUM', bgcolor = color.new(color.blue, 90), text_color = color.white)
table.cell(rangeTable, column = 0, row = 2, text = 'RANGE HIGH', bgcolor = color.new(color.blue, 90), text_color = color.white)
table.cell(rangeTable, column = 0, row = 3, text = 'RANGE LOW', bgcolor = color.new(color.blue, 90), text_color = color.white)
// Update table with range value  
table.cell(rangeTable, column = 1, row = 0, text = str.tostring(RANGE_CALC), bgcolor = color.new(color.gray, 90), text_color = color.white)
table.cell(rangeTable, column = 1, row = 1, text = str.tostring(EQUILIBRIUM), bgcolor = color.new(color.gray, 90), text_color = color.white)
table.cell(rangeTable, column = 1, row = 2, text = str.tostring(swingHigh), bgcolor = color.new(color.gray, 90), text_color = color.white)
table.cell(rangeTable, column = 1, row = 3, text = str.tostring(swingLow), bgcolor = color.new(color.gray, 90), text_color = color.white)
if barstate.islast
    line.delete(eql_line)
    eql_line := line.new(x1 = time[position_x + numCandles], y1 = EQUILIBRIUM, x2 = time + numCandles, y2 = EQUILIBRIUM, color = color.rgb(252, 252, 252), width = 1, style = line.style_dotted, xloc = xloc.bar_time)
    label.delete(eql_lbl)
    eql_lbl := label.new(time_close[numCandles], EQUILIBRIUM, text = str.tostring(EQUILIBRIUM), yloc = yloc.price, xloc = xloc.bar_time, textcolor = color.rgb(200, 255, 0), color = #ffffff00, style = label.style_label_center)
    eql_lbl
VIPER_TIME_TRANSFORMER_ENGINE() =>
    if not na(0)
        TRANSFORMED_MINUTE = timeframe.multiplier * (
          timeframe.isseconds ? 1. / 60             :  
          timeframe.isminutes ? 1.                  :  
          timeframe.isdaily   ? 60. * 24            :  
          timeframe.isweekly  ? 60. * 24 * 7        :  
          timeframe.ismonthly ? 60. * 24 * 30.4375  : na)
        [TRANSFORMED_MINUTE]

// Transform current timeframe to minutes
[TRANSFORMED_MINUTE] = VIPER_TIME_TRANSFORMER_ENGINE()
TRANSFORMED_INDEX_TO_SECONDS=TRANSFORMED_MINUTE * 60
table.cell(rangeTable, column = 0, row = 4, text = 'INDEX STEP in seconds', bgcolor = color.new(color.blue, 90), text_color = color.white)
table.cell(rangeTable, column = 1, row = 4, text = str.tostring(TRANSFORMED_INDEX_TO_SECONDS), bgcolor = color.new(color.gray, 90), text_color = color.white)
F_INDEX_H()=>  
    var float INDEXHIGH = 0.0
    if high > hh[1] and high > high[3]
        lastSwingHigh1 = swingHigh
        swingHigh1 = high
        INDEXHIGH := bar_index
    [INDEXHIGH]

F_INDEX_L()=>
    var float INDEXLOW = 0.0
    if low < ll[1] and low < low[3]
        lastSwingLow1 = swingLow
        swingLow1 = low
        INDEXLOW := bar_index
    [INDEXLOW]

[INDEXHIGH] = F_INDEX_H()
[INDEXLOW] = F_INDEX_L()

// Calculate time differences in seconds
INDEX_DIFRANCE_H = math.abs(bar_index - INDEXHIGH) * TRANSFORMED_INDEX_TO_SECONDS
INDEX_DIFRANCE_L = math.abs(bar_index - INDEXLOW) * TRANSFORMED_INDEX_TO_SECONDS
table.cell(rangeTable, column = 0, row = 5, text = ' DIFRANCE H IN sec', bgcolor = color.new(color.blue, 90), text_color = color.white)
table.cell(rangeTable, column = 1, row = 5, text = str.tostring(INDEX_DIFRANCE_H), bgcolor = color.new(color.gray, 90), text_color = color.white)
table.cell(rangeTable, column = 0, row = 6, text = 'DIFRANCE L in sec', bgcolor = color.new(color.blue, 90), text_color = color.white)
table.cell(rangeTable, column = 1, row = 6, text = str.tostring(INDEX_DIFRANCE_L), bgcolor = color.new(color.gray, 90), text_color = color.white)
